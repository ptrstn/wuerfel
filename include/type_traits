/*
 * ++C - C++ introduction
 * Copyright (C) 2013, 2014, 2015, 2016, 2017 Wilhelm Meier <wilhelm.meier@hs-kl.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

namespace std {
    template<class T, T v>
    struct integral_constant {
        static constexpr T value = v;
        typedef T value_type;
        typedef integral_constant type; // using injected-class-name
        constexpr operator value_type() const noexcept { return value; }
        constexpr value_type operator()() const noexcept { return value; } //since c++14
    };
    
    struct false_type : public integral_constant<bool, false> {};
    struct true_type : public integral_constant<bool, true> {};
    
    template<class T> struct is_volatile             : false_type {};
    template<class T> struct is_volatile<volatile T> : true_type {};
    
    
    // Metafunktion zur Typgleichheit
    template<typename T, typename U>
    struct is_same {
        static constexpr bool value = false;
    };
    // partielle Spezialisierung
    template<typename T>
    struct is_same<T, T> {
        static constexpr bool value = true;
    };
    
    template<bool B, class T, class F>
    struct conditional { 
        typedef T type; 
    };
    
    template<class T, class F>
    struct conditional<false, T, F> { 
        typedef F type; 
    };
    
    template<bool B, class T = void>
    struct enable_if {};
    
    template<class T>
    struct enable_if<true, T> {
        typedef T type;
    };
    
    template<typename T>
    struct underlying_type {
        typedef __underlying_type(T) type;
    };
    
    template< class T > struct remove_const          { typedef T type; };
    template< class T > struct remove_const<const T> { typedef T type; };
    
    template< class T > struct remove_volatile             { typedef T type; };
    template< class T > struct remove_volatile<volatile T> { typedef T type; };
    
    template< class T >
    struct remove_cv {
        typedef typename std::remove_volatile<typename std::remove_const<T>::type>::type type;
    };
    
    template< class T >
    using remove_cv_t       = typename remove_cv<T>::type;
    template< class T >
    using remove_const_t    = typename remove_const<T>::type;
    template< class T >
    using remove_volatile_t = typename remove_volatile<T>::type;
    
    enum class endian { // since c++20
#ifdef _WIN32
        little = 0,
        big    = 1,
        native = little
#else
        little = __ORDER_LITTLE_ENDIAN__,
        big    = __ORDER_BIG_ENDIAN__,
        native = __BYTE_ORDER__
#endif
    };
}

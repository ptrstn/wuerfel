#pragma once

#include <utility>
#include <cstdint>

namespace std {
    template <typename T, size_t Size>
    struct array {
        constexpr T& operator[](size_t pos) { 
            return mData[pos]; 
        }
        
        constexpr const T& operator[](size_t pos) const { 
            return mData[pos]; 
        }
        
        constexpr size_t size() const { 
            return Size; 
        }
        
        constexpr T* data() { 
            return mData; 
        }
        
        constexpr const T* data() const { 
            return mData; 
        }

        constexpr const T* begin() const {
            return &mData[0];
        }
        constexpr const T* end() const {
            return &mData[Size];
        }
        constexpr const volatile T* begin() const volatile {
            return &mData[0];
        }
        constexpr const volatile T* end() const volatile {
            return &mData[Size];
        }
        constexpr T* begin() {
            return &mData[0];
        }
        constexpr T* end() {
            return &mData[Size];
        }
        constexpr volatile T* begin() volatile {
            return &mData[0];
        }
        constexpr volatile T* end() volatile {
            return &mData[Size];
        }
        
        T mData[Size] = {};
    };

}

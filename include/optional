/*
 * ++C - C++ introduction
 * Copyright (C) 2013, 2014, 2015, 2016, 2017 Wilhelm Meier <wilhelm.meier@hs-kl.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

namespace std {
    
    template<typename T>
    class optional final {
    public:
        constexpr optional() :
            mValid(false),
            mValue()
        {
        }
        constexpr optional(const T& value) :
            mValid(true),
            mValue(value)
        {
        }
        constexpr optional(const volatile T& value) :
            mValid(true),
            mValue(value)
        {
        }
        constexpr explicit operator bool() const // safe-bool
        {
            return mValid;
        }
        constexpr explicit operator bool() // safe-bool
        {
            return mValid;
        }
        constexpr bool operator!() const {
            return !mValid;
        }
        constexpr T& operator*()
        {
            return mValue;
        }
        constexpr const T& operator*() const
        {
            return mValue;
        }
        constexpr T* operator->()
        {
            return &mValue;
        }
        constexpr const T* operator->() const
        {
            return &mValue;
        }
    private:
        bool mValid{false};
        T mValue{};
    };
    
}


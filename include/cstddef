/*
 * ++C - C++ introduction
 * Copyright (C) 2013, 2014, 2015, 2016, 2017 Wilhelm Meier <wilhelm.meier@hs-kl.de>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <stdint.h>
#include <stddef.h>

//[std
namespace std { // <> Für die Plattform AVR existert keine {cppstdlib}
    //[byte
    enum class byte : uint8_t {}; // <> Darstellung eines Bytes als eine Sammlung von Bits
    //]
    
    inline constexpr std::byte operator&(std::byte lhs, std::byte rhs) {
        return std::byte(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs));
    }

    inline constexpr std::byte operator|(std::byte lhs, std::byte rhs) {
        return std::byte(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs));
    }

    inline constexpr std::byte operator^(std::byte lhs, std::byte rhs) {
        return std::byte(static_cast<uint8_t>(lhs) ^ static_cast<uint8_t>(rhs));
    }
    
    inline void operator|=(volatile std::byte& lhs, std::byte rhs) {
        lhs = std::byte(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs));
    }
    inline constexpr void operator|=(std::byte& lhs, std::byte rhs) {
        lhs = std::byte(static_cast<uint8_t>(lhs) | static_cast<uint8_t>(rhs));
    }
    inline void operator&=(volatile std::byte& lhs, std::byte rhs) {
        lhs = std::byte(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs));
    }
    inline constexpr void operator&=(std::byte& lhs, std::byte rhs) {
        lhs = std::byte(static_cast<uint8_t>(lhs) & static_cast<uint8_t>(rhs));
    }
    inline constexpr void operator^=(std::byte& lhs, std::byte rhs) {
        lhs = std::byte(static_cast<uint8_t>(lhs) ^ static_cast<uint8_t>(rhs));
    }
    inline void operator^=(volatile std::byte& lhs, std::byte rhs) {
        lhs = std::byte(static_cast<uint8_t>(lhs) ^ static_cast<uint8_t>(rhs));
    }
    
    inline constexpr std::byte operator~(std::byte b) {
        return std::byte(~static_cast<uint8_t>(b));
    }

    inline constexpr bool any(std::byte b) {
        return b != std::byte{0};
    }
    inline constexpr bool none(std::byte b) {
        return b == std::byte{0};
    }
    template<typename IType>
    inline constexpr byte& operator<<=(byte& b, IType shift) noexcept {
        return b = byte(static_cast<uint8_t>(b) << shift);
    }
    template<typename IType>
    inline constexpr byte& operator>>=(byte& b, IType shift) noexcept {
        return b = byte(static_cast<uint8_t>(b) >> shift);
    }
    template<typename IType>
    inline constexpr byte operator>>(byte b, IType shift) noexcept {
        return byte(static_cast<uint8_t>(b) >> shift);
    }

    template<typename T>
    inline constexpr T to_integer(byte b) noexcept {
        return T((uint8_t)b);
    }
    
    namespace literals {
        //[lit
        constexpr byte operator"" _byte(unsigned long long v) { // <> Literal-Operator für den Suffix `_byte`
            return byte{static_cast<uint8_t>(v)};
        }
        //]
    } // !literals
} // !std
//]